{
  "language": "Solidity",
  "sources": {
    "contracts/FundingVaultV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\n/*\r\n##################################################################\r\n#                      Funding Vault                             #\r\n#                                                                #\r\n# This contract is used to distribute fund reserves to faucets   #\r\n# or other projects that have a ongoing need for testnet funds.  #\r\n#                                                                #\r\n#  Vault contract:  0x610866c6089768dA95524bcc4cE7dB61eDa3931c   #\r\n#                                                                #\r\n# see https://github.com/ethpandaops/fundingvault                #\r\n##################################################################\r\n*/\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./FundingVaultProxyStorage.sol\";\r\nimport \"./IFundingVaultToken.sol\";\r\nimport \"./IFundingVault.sol\";\r\n\r\nstruct Grant {\r\n  uint64 claimTime;\r\n  uint64 claimInterval;\r\n  uint128 claimLimit;\r\n  uint256 dustBalance;\r\n}\r\n\r\ncontract FundingVaultStorage {\r\n  // slot 0x05\r\n  address internal _vaultTokenAddr;\r\n  uint64 internal _grantIdCounter;\r\n  uint32 internal _claimTransferLockTime;\r\n\r\n  // slot 0x06\r\n  uint128 internal _managerLimitAmount;\r\n  uint64 internal _managerLimitInterval;\r\n  uint32 internal _managerGrantCooldown;\r\n  uint32 internal _managerGrantCooldownLock;\r\n\r\n  // slot 0x07\r\n  mapping(uint64 => Grant) internal _grants;\r\n\r\n  // slot 0x08\r\n  mapping(uint64 => uint64) internal _grantClaimLock;\r\n\r\n  // slot 0x09\r\n  mapping(address => uint64) internal _managerCooldown;\r\n\r\n  // slot 0x0a\r\n  mapping(uint64 => uint256) internal _grantTotalClaimed;\r\n\r\n  // slot 0x0b\r\n  mapping(uint64 => bytes32) internal _grantNames;\r\n}\r\n\r\ncontract FundingVaultV1 is \r\n  FundingVaultProxyStorage, // 0x00 - 0x01\r\n  AccessControl,            // 0x02\r\n  Pausable,                 // 0x03\r\n  ReentrancyGuard,          // 0x04\r\n  FundingVaultStorage,      // 0x05 - 0x0b\r\n  IFundingVault\r\n{\r\n  bytes32 public constant GRANT_MANAGER_ROLE = keccak256(\"GRANT_MANAGER_ROLE\");\r\n\r\n  event GrantLock(uint64 indexed grantId, uint64 lockTime, uint64 lockTimeout);\r\n  event GrantUpdate(uint64 indexed grantId, uint128 amount, uint64 interval);\r\n  event GrantClaim(uint64 indexed grantId, address indexed to, uint256 amount, uint64 grantTimeUsed);\r\n\r\n  receive() external payable {\r\n  }\r\n\r\n  function initialize(address tokenAddr) public {\r\n    require(tokenAddr != address(0), \"tokenAddr must not be 0\");\r\n    require(_reentrancyStatus == 0 && _grantIdCounter == 0, \"already initialized\");\r\n    require(_manager == _msgSender(), \"access denied\");\r\n    _grantRole(DEFAULT_ADMIN_ROLE, _manager);\r\n    _reentrancyStatus = 1;\r\n    _vaultTokenAddr = tokenAddr;\r\n    _grantIdCounter = 1;\r\n    _claimTransferLockTime = 600;\r\n    _managerLimitAmount = 100000;\r\n    _managerLimitInterval = 2592000;\r\n    _managerGrantCooldown = 86400;\r\n    _managerGrantCooldownLock = 43200;\r\n  }\r\n\r\n\r\n  //## Admin configuration / rescue functions\r\n\r\n  function rescueCall(address addr, uint256 amount, bytes calldata data) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    require(addr != address(0), \"addr must not be 0\");\r\n\r\n    uint balance = address(this).balance;\r\n    require(balance >= amount, \"amount exceeds wallet balance\");\r\n\r\n    (bool sent, ) = payable(addr).call{value: amount}(data);\r\n    require(sent, \"call failed\");\r\n  }\r\n\r\n  function setPaused(bool paused) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    if(paused) {\r\n      _pause();\r\n    } else {\r\n      _unpause();\r\n    }\r\n  }\r\n\r\n  function setProxyManager(address manager) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    require(manager != address(0), \"manager must not be 0\");\r\n    _manager = manager;\r\n  }\r\n\r\n  function setClaimTransferLockTime(uint32 lockTime) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    _claimTransferLockTime = lockTime;\r\n  }\r\n\r\n  function setManagerGrantLimits(uint128 amount, uint64 interval, uint32 cooldown, uint32 cooldownLock) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    _managerLimitAmount = amount;\r\n    _managerLimitInterval = interval;\r\n    _managerGrantCooldown = cooldown;\r\n    _managerGrantCooldownLock = cooldownLock;\r\n  }\r\n\r\n  \r\n  //## Internal helper functions\r\n\r\n  function _ownerOf(uint64 tokenId) internal view returns (address) {\r\n    return IFundingVaultToken(_vaultTokenAddr).ownerOf(tokenId);\r\n  }\r\n\r\n  function _getTime() internal view returns (uint64) {\r\n    return uint64(block.timestamp);\r\n  }\r\n\r\n  /*\r\n  The _calculateClaim function is the central piece of code that does the calculations for claiming funds via a grant.\r\n    Arguments: \r\n      grantId - the grant id the sender likes to claim from\r\n      requestAmount - the desired amount of funds the sender likes to claim (0 to claim all available)\r\n    Return Values:\r\n      claimAmount - the amount of funds for payout, smaller or equal to requestedAmount, max available if requestAmount is 0\r\n      newClaimTime - the new claimTime, must be set to the grant struct if claimAmount is payed out\r\n      newDustBalance - the new dustBalance, must be set to the grant struct if claimAmount is payed out\r\n      usedTime - the used claim time to fulfil the request (more informative and for debugging)\r\n  */\r\n  function _calculateClaim(uint64 grantId, uint256 requestAmount) public view \r\n    returns (uint256 claimAmount, uint64 newClaimTime, uint256 newDustBalance, uint64 usedTime) {\r\n    Grant memory grant = _grants[grantId];\r\n    require(grant.claimInterval > 0 && grant.claimLimit > 0 && grant.claimTime > 0, \"invalid grant\");\r\n    \r\n    uint256 claimLimit = grant.claimLimit * 1 ether;\r\n    if(requestAmount > claimLimit) {\r\n      requestAmount = claimLimit;\r\n    }\r\n\r\n    uint64 time = _getTime();\r\n    if(_grantClaimLock[grantId] > time) {\r\n      // grant locked\r\n      newClaimTime = grant.claimTime;\r\n      usedTime = 0;\r\n      claimAmount = 0;\r\n      newDustBalance = grant.dustBalance;\r\n    }\r\n    else {\r\n      uint64 baseClaimTime = grant.claimTime;\r\n      uint64 availableTime = time - baseClaimTime;\r\n      uint256 dustBalance = grant.dustBalance;\r\n      if(availableTime > grant.claimInterval) {\r\n        // available time exceeds interval\r\n        // the sender claimed less than granted, the unclaimed amount is no longer available \r\n        availableTime = grant.claimInterval;\r\n        baseClaimTime = time - grant.claimInterval;\r\n        dustBalance = 0;\r\n      }\r\n\r\n      if(requestAmount != 0 && requestAmount <= dustBalance) {\r\n        // take from dust balance\r\n        newClaimTime = baseClaimTime;\r\n        usedTime = 0;\r\n        claimAmount = requestAmount;\r\n        newDustBalance = dustBalance - requestAmount;\r\n      }\r\n      else {\r\n        // get max claimable amount\r\n        claimAmount = (claimLimit * availableTime / grant.claimInterval) + dustBalance;\r\n\r\n        if(requestAmount != 0 && requestAmount < claimAmount) {\r\n          // sender requested less than available, \"partial\" claim\r\n          uint256 requestClaimAmount = requestAmount - dustBalance;\r\n          usedTime = uint64(requestClaimAmount * grant.claimInterval / claimLimit);\r\n          if(usedTime * claimLimit / grant.claimInterval < requestClaimAmount) {\r\n            usedTime++; // round up if there is a rounding gap in ETH amount\r\n            newDustBalance = (usedTime * claimLimit / grant.claimInterval) - requestClaimAmount;\r\n          }\r\n          else {\r\n            newDustBalance = 0;\r\n          }\r\n          require(usedTime <= availableTime, \"calculation error: usedTime > availableTime\");\r\n\r\n          newClaimTime = baseClaimTime + usedTime;\r\n          claimAmount = requestAmount;\r\n        }\r\n        else {\r\n          // sender requested all available funds\r\n          usedTime = availableTime;\r\n          newClaimTime = time;\r\n          newDustBalance = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  //## Public view functions\r\n\r\n  function getVaultToken() public view returns (address) {\r\n    return _vaultTokenAddr;\r\n  }\r\n\r\n  function getGrants() public view returns (Grant[] memory) {\r\n    IFundingVaultToken vaultToken = IFundingVaultToken(_vaultTokenAddr);\r\n    uint256 grantCount = vaultToken.totalSupply();\r\n    Grant[] memory grants = new Grant[](grantCount);\r\n    for(uint256 grantIdx = 0; grantIdx < grantCount; grantIdx++) {\r\n      uint64 grantId = uint64(vaultToken.tokenByIndex(grantIdx));\r\n      grants[grantIdx] = _grants[grantId];\r\n    }\r\n    return grants;\r\n  }\r\n\r\n  function getGrant(uint64 grantId) public view returns (Grant memory) {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    return _grants[grantId];\r\n  }\r\n\r\n  function getGrantName(uint64 grantId) public view returns (bytes32) {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    return _grantNames[grantId];\r\n  }\r\n\r\n  function getGrantTotalClaimed(uint64 grantId) public view returns (uint256) {\r\n    return _grantTotalClaimed[grantId];\r\n  }\r\n\r\n  function getGrantLockTime(uint64 grantId) public view returns (uint64) {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    if(_grantClaimLock[grantId] > _getTime()) {\r\n      return _grantClaimLock[grantId] - _getTime();\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function getClaimableBalance() public view returns (uint256) {\r\n    uint256 claimableAmount = 0;\r\n    IFundingVaultToken vaultToken = IFundingVaultToken(_vaultTokenAddr);\r\n\r\n    uint64 grantCount = uint64(vaultToken.balanceOf(_msgSender()));\r\n    for(uint64 grantIdx = 0; grantIdx < grantCount; grantIdx++) {\r\n      uint64 grantId = uint64(vaultToken.tokenOfOwnerByIndex(_msgSender(), grantIdx));\r\n      claimableAmount += _claimableBalance(grantId);\r\n    }\r\n    return claimableAmount;\r\n  }\r\n\r\n  function getClaimableBalance(uint64 grantId) public view returns (uint256) {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    return _claimableBalance(grantId);\r\n  }\r\n\r\n  function _claimableBalance(uint64 grantId) internal view returns (uint256) {\r\n    (uint256 claimAmount, , , ) = _calculateClaim(grantId, 0);\r\n    return claimAmount;\r\n  }\r\n\r\n  function getManagerCooldown(address manager) public view returns (uint64) {\r\n    if(_managerCooldown[manager] <= _getTime()) {\r\n      return 0;\r\n    }\r\n    return _managerCooldown[manager] - _getTime();\r\n  }\r\n\r\n  function getManagerGrantLimits() public view returns (uint128, uint64, uint32, uint32) {\r\n    return (\r\n      _managerLimitAmount,\r\n      _managerLimitInterval,\r\n      _managerGrantCooldown,\r\n      _managerGrantCooldownLock\r\n    );\r\n  }\r\n\r\n  //## Grant managemnet functions (Grant Manager)\r\n\r\n  function createGrant(address addr, uint128 amount, uint64 interval, bytes32 name) public onlyRole(GRANT_MANAGER_ROLE) nonReentrant {\r\n    require(amount > 0 && interval > 0, \"invalid grant\");\r\n    require(interval < _getTime(), \"interval too big\");\r\n    require(addr != address(0), \"addr must not be 0\");\r\n    uint256 grantQuota = uint256(amount) * 1 ether / interval;\r\n    uint256 managerQuota = uint256(_managerLimitAmount) * 1 ether / _managerLimitInterval;\r\n\r\n    if(!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n      _requireNotPaused();\r\n\r\n      if(interval > _managerLimitInterval) {\r\n        // special case, if a grant with an interval bigger than the manager limit interval is created\r\n        // increase the grantQuota as if the grant would have been created with the manager limit interval\r\n        // this avoids managers from exploiting the contract by creating multiple grants with extremely high intervals\r\n        grantQuota = uint256(amount) * 1 ether / _managerLimitInterval;\r\n      }\r\n\r\n      // check if granted amount exceeds manager limits\r\n      require(amount <= _managerLimitAmount, \"amount exceeds manager limits\");\r\n      require(grantQuota <= managerQuota, \"quota exceeds manager limits\");\r\n      require(_managerCooldown[_msgSender()] < _getTime() + _managerGrantCooldownLock, \"manager cooldown\");\r\n    }\r\n    if(_managerCooldown[_msgSender()] < _getTime()) {\r\n      _managerCooldown[_msgSender()] = _getTime();\r\n    }\r\n    _managerCooldown[_msgSender()] += uint64(_managerGrantCooldown * grantQuota / managerQuota) + 1;\r\n\r\n    uint64 grantId = _grantIdCounter++;\r\n    _grants[grantId] = Grant({\r\n      claimTime: _getTime() - interval,\r\n      claimInterval: interval,\r\n      claimLimit: amount,\r\n      dustBalance: 0\r\n    });\r\n    _grantNames[grantId] = name;\r\n    IFundingVaultToken(_vaultTokenAddr).tokenUpdate(grantId, addr);\r\n\r\n    emit GrantUpdate(grantId, amount, interval);\r\n  }\r\n\r\n  function updateGrant(uint64 grantId, uint128 amount, uint64 interval) public onlyRole(GRANT_MANAGER_ROLE) nonReentrant {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    require(amount > 0 && interval > 0, \"invalid grant\");\r\n\r\n    uint256 oldQuota = uint256(_grants[grantId].claimLimit) * 1 ether / _grants[grantId].claimInterval;\r\n    uint256 newQuota = uint256(amount) * 1 ether / interval;\r\n    uint256 managerQuota = uint256(_managerLimitAmount) * 1 ether / _managerLimitInterval;\r\n    bool isIncrease = newQuota > oldQuota;\r\n\r\n    if(!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n      _requireNotPaused();\r\n      // check if granted amount exceeds manager limits\r\n      require(amount <= _managerLimitAmount, \"amount exceeds manager limits\");\r\n      require(newQuota <= managerQuota, \"quota exceeds manager limits\");\r\n\r\n      if(isIncrease) {\r\n        require(_managerCooldown[_msgSender()] < _getTime() + _managerGrantCooldownLock, \"manager cooldown\");\r\n      }\r\n    }\r\n    if(isIncrease) {\r\n      if(_managerCooldown[_msgSender()] < _getTime()) {\r\n        _managerCooldown[_msgSender()] = _getTime();\r\n      }\r\n      _managerCooldown[_msgSender()] += uint64(_managerGrantCooldown * (newQuota - oldQuota) / managerQuota) + 1;\r\n    }\r\n\r\n    _grants[grantId].claimInterval = interval;\r\n    _grants[grantId].claimLimit = amount;\r\n\r\n    emit GrantUpdate(grantId, amount, interval);\r\n  }\r\n\r\n  function transferGrant(uint64 grantId, address addr) public onlyRole(GRANT_MANAGER_ROLE) nonReentrant {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    require(addr != address(0), \"addr must not be 0\");\r\n\r\n    uint256 grantQuota = uint256(_grants[grantId].claimLimit) * 1 ether / _grants[grantId].claimInterval;\r\n    uint256 managerQuota = uint256(_managerLimitAmount) * 1 ether / _managerLimitInterval;\r\n\r\n    if(!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n      _requireNotPaused();\r\n      // check if grant quota exceeds manager limits\r\n      require(_grants[grantId].claimLimit <= _managerLimitAmount, \"quota exceeds manager limits\");\r\n      require(grantQuota <= managerQuota, \"quota exceeds manager limits\");\r\n      require(_managerCooldown[_msgSender()] < _getTime() + _managerGrantCooldownLock, \"manager cooldown\");\r\n    }\r\n    if(_managerCooldown[_msgSender()] < _getTime()) {\r\n      _managerCooldown[_msgSender()] = _getTime();\r\n    }\r\n    _managerCooldown[_msgSender()] += uint64(_managerGrantCooldown * grantQuota / managerQuota) + 1;\r\n\r\n    IFundingVaultToken(_vaultTokenAddr).tokenUpdate(grantId, addr);\r\n  }\r\n\r\n  function removeGrant(uint64 grantId) public onlyRole(GRANT_MANAGER_ROLE) nonReentrant {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n\r\n    if(!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n      _requireNotPaused();\r\n    }\r\n\r\n    IFundingVaultToken(_vaultTokenAddr).tokenUpdate(grantId, address(0));\r\n    delete _grants[grantId];\r\n  }\r\n\r\n  function renameGrant(uint64 grantId, bytes32 name) public onlyRole(GRANT_MANAGER_ROLE) nonReentrant {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n\r\n    if(!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n      _requireNotPaused();\r\n    }\r\n\r\n    _grantNames[grantId] = name;\r\n  }\r\n\r\n  function lockGrant(uint64 grantId, uint64 lockTime) public nonReentrant {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    require(\r\n      _msgSender() == _ownerOf(grantId) || \r\n      hasRole(GRANT_MANAGER_ROLE, _msgSender())\r\n    , \"not grant owner or manager\");\r\n\r\n    if(!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n      _requireNotPaused();\r\n    }\r\n\r\n    _lockGrant(grantId, lockTime);\r\n  }\r\n\r\n  function notifyGrantTransfer(uint64 grantId) public {\r\n    require(_msgSender() == _vaultTokenAddr, \"not token contract\");\r\n    _lockGrant(grantId, _claimTransferLockTime);\r\n  }\r\n\r\n  function _lockGrant(uint64 grantId, uint64 lockTime) internal {\r\n    uint64 lockTimeout = _getTime() + lockTime;\r\n    if(lockTimeout > _grantClaimLock[grantId] || hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n      _grantClaimLock[grantId] = lockTimeout;\r\n    }\r\n    else {\r\n      lockTime = 0;\r\n      lockTimeout = _grantClaimLock[grantId];\r\n    }\r\n    emit GrantLock(grantId, lockTime, lockTimeout);\r\n  }\r\n\r\n  \r\n  //## Public claim functions\r\n\r\n  function claim(uint256 amount) public whenNotPaused nonReentrant returns (uint256) {\r\n    uint256 claimAmount = _claimFrom(_msgSender(), amount, _msgSender());\r\n    if(amount > 0) {\r\n      require(claimAmount == amount, \"claim failed\");\r\n    }\r\n    else {\r\n      require(claimAmount > 0, \"claim failed\");\r\n    }\r\n    return claimAmount;\r\n  }\r\n\r\n  function claim(uint64 grantId, uint256 amount) public whenNotPaused nonReentrant returns (uint256) {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    require(_ownerOf(grantId) == _msgSender(), \"not owner of this grant\");\r\n\r\n    uint256 claimAmount = _claim(grantId, amount, _msgSender());\r\n    if(amount > 0) {\r\n      require(claimAmount == amount, \"claim failed\");\r\n    }\r\n    else {\r\n      require(claimAmount > 0, \"claim failed\");\r\n    }\r\n    return claimAmount;\r\n  }\r\n\r\n  function claimTo(uint256 amount, address target) public whenNotPaused nonReentrant returns (uint256) {\r\n    require(target != address(0), \"target must not be 0\");\r\n\r\n    uint256 claimAmount = _claimFrom(_msgSender(), amount, target);\r\n    if(amount > 0) {\r\n      require(claimAmount == amount, \"claim failed\");\r\n    }\r\n    else {\r\n      require(claimAmount > 0, \"claim failed\");\r\n    }\r\n    return claimAmount;\r\n  }\r\n\r\n  function claimTo(uint64 grantId, uint256 amount, address target) public whenNotPaused nonReentrant returns (uint256) {\r\n    require(_grants[grantId].claimTime > 0, \"grant not found\");\r\n    require(_ownerOf(grantId) == _msgSender(), \"not owner of this grant\");\r\n    require(target != address(0), \"target must not be 0\");\r\n\r\n    uint256 claimAmount = _claim(grantId, amount, target);\r\n    if(amount > 0) {\r\n      require(claimAmount == amount, \"claim failed\");\r\n    }\r\n    else {\r\n      require(claimAmount > 0, \"claim failed\");\r\n    }\r\n    return claimAmount;\r\n  }\r\n\r\n  function _claimFrom(address owner, uint256 amount, address target) internal returns (uint256) {\r\n    uint256 claimAmount = 0;\r\n    IFundingVaultToken vaultToken = IFundingVaultToken(_vaultTokenAddr);\r\n\r\n    uint64 grantCount = uint64(vaultToken.balanceOf(owner));\r\n    for(uint64 grantIdx = 0; grantIdx < grantCount; grantIdx++) {\r\n      uint64 grantId = uint64(vaultToken.tokenOfOwnerByIndex(owner, grantIdx));\r\n      uint256 claimed = _claim(grantId, amount, target);\r\n      claimAmount += claimed;\r\n      if(amount > 0) {\r\n        if(amount == claimed) {\r\n          break;\r\n        }\r\n        else {\r\n          amount -= claimed;\r\n        }\r\n      }\r\n    }\r\n    return claimAmount;\r\n  }\r\n\r\n  function _claim(uint64 grantId, uint256 amount, address target) internal returns (uint256) {\r\n    (uint256 claimAmount, uint64 newClaimTime, uint256 newDustBalance, uint64 usedClaimTime) = _calculateClaim(grantId, amount);\r\n    if(claimAmount == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // update grant struct\r\n    _grants[grantId].claimTime = newClaimTime;\r\n    _grants[grantId].dustBalance = newDustBalance;\r\n    _grantTotalClaimed[grantId] += claimAmount;\r\n\r\n    // send claim amount to target\r\n    (bool sent, ) = payable(target).call{value: claimAmount}(\"\");\r\n    require(sent, \"failed to send ether\");\r\n\r\n    // emit claim event\r\n    emit GrantClaim(grantId, target, claimAmount, usedClaimTime);\r\n\r\n    return claimAmount;\r\n  }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "contracts/FundingVaultProxyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\ncontract FundingVaultProxyStorage {\r\n  // slot 0x00 - manager address (admin)\r\n  address internal _manager;\r\n  uint96 internal __unused0;\r\n  // slot 0x01 - implementation address\r\n  address internal _implementation;\r\n  uint96 internal __unused1;\r\n}\r\n"
    },
    "contracts/IFundingVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\ninterface IFundingVault {\r\n  function notifyGrantTransfer(uint64 grantId) external;\r\n}\r\n"
    },
    "contracts/IFundingVaultToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\n\r\ninterface IFundingVaultToken is IERC721Enumerable {\r\n  function tokenUpdate(uint64 tokenId, address targetAddr) external;\r\n}\r\n"
    },
    "contracts/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 internal _reentrancyStatus;\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _reentrancyStatus will be _NOT_ENTERED\r\n        require(_reentrancyStatus != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _reentrancyStatus = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _reentrancyStatus = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _reentrancyStatus == _ENTERED;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "libraries": {},
    "optimizer": {
      "runs": 2000,
      "enabled": true
    },
    "evmVersion": "paris",
    "remappings": []
  }
}